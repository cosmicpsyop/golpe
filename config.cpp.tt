#include "golpe.h"

#include <tao/config.hpp>


std::atomic<ConfigValues*> currentCfg;


void loadConfig(const std::string &configFile) {
    tao::config::value configJson;

    try {
        configJson = tao::config::from_file(configFile);
    } catch (std::exception &e) {
        throw herr("Failed to load config file '", configFile, "': ", e.what());
    }

    std::unique_ptr<ConfigValues> tmpCfg = std::make_unique<ConfigValues>();


    [% FOREACH c IN config %]
    // [% c.name %]
    do {
        auto val = configJson;

        [% FOREACH p IN c.path %]
            if (!val.is_object()) break;
            if (!val.get_object().contains("[% p %]")) break;
            val = val.at("[% p %]");
        [% END %]

        [% IF c.type == 'uint64' %]
            if (!val.is_unsigned()) throw herr("[% c.name %] not a uint64");
            tmpCfg->[% c.nameCpp %] = val.get_unsigned();
        [% ELSIF c.type == 'string' %]
            if (!val.is_string()) throw herr("[% c.name %] not a string");
            tmpCfg->[% c.nameCpp %] = val.get_string();
        [% END %]
    } while(0);
    [% END %]


    // Atomically swap in new config, and destroy old one:

    tmpCfg.reset(currentCfg.exchange(tmpCfg.release()));
}
