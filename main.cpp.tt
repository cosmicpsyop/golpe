#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <iostream>

#include <hoytech/error.h>
#include <docopt.h>

#include "golpe.h"

#include "app_git_version.h"



static const char USAGE[] =
R"(
    Usage: [% golpe.appName %] [% IF golpe.features.config %][--config=<config>][% END -%] <command> [<args>...]

    Options:
      [% IF golpe.features.config %]--config=<config>   Config file (default $ENV{[% golpe.appName FILTER upper %]_CONFIG} || "/etc/[% golpe.appName %].conf" || "./[% golpe.appName %].conf")[% END %]
      -h --help           Show this screen.
      --version           Show version.

[% IF cmds.size > 0 %]
    commands:
[%- FOREACH cmd IN cmds %]
      [% cmd %]
[%- END %]

[%- END %]
[%- FOREACH app IN apps %]
    [% app.name %] commands:
[%- FOREACH cmd IN app.cmds %]
      [% cmd %]
[%- END %]

[%- END %]
)";



[% IF golpe.features.config %]
std::string configFile;
[% END %]

[% IF golpe.features.db %]
std::string dbDir;
defaultDb::environment env;
[% END %]



[% FOREACH cmd IN cmds %]
void cmd_[% cmd %](const std::vector<std::string> &subArgs);
[% END %]

[% FOREACH app IN apps %][% FOREACH cmd IN app.cmds %]
void cmd_[% cmd %](const std::vector<std::string> &subArgs);
[% END %][% END %]



void run(int argc, char **argv) {
    std::map<std::string, docopt::value> args = docopt::docopt(USAGE, { argv + 1, argv + argc }, true, "[% golpe.appName %] " APP_GIT_VERSION, true);

    loguru::g_stderr_verbosity = [% golpe.verbosity || 0 %];
    loguru::g_preamble_file = false;
    loguru::init(argc, argv, loguru::Options{ .signal_options = loguru::SignalOptions{ .sigint = false, }, });

    [% IF golpe.features.config %]
    auto fileExists = [](const char *name) {
        return access(name, F_OK) != -1;
    };

    if (args["--config"]) {
        configFile = args["--config"].asString();
    } else if (getenv("[% golpe.appName FILTER upper %]_CONFIG")) {
        configFile = std::string(getenv("[% golpe.appName FILTER upper %]_CONFIG"));
    } else if (fileExists("/etc/[% golpe.appName %].conf")) {
        configFile = "/etc/[% golpe.appName %].conf";
    } else if (fileExists("./[% golpe.appName %].conf")) {
        configFile = "./[% golpe.appName %].conf";
    } else {
        throw hoytech::error("please specify config file");
    }

    loadConfig(configFile);
    [% END %]

    std::string command = args["<command>"].asString();

    [% IF golpe.features.db %]
    dbDir = cfg().db;

    unsigned int dbFlags = 0;
    if (cfg().dbParams__noReadAhead) dbFlags |= MDB_NORDAHEAD;

    [% IF golpe.features.customLMDBSetup %]
        env.lmdb_env.set_max_dbs(64);
        env.lmdb_env.set_max_readers(cfg().dbParams__maxreaders);
        env.lmdb_env.set_mapsize(cfg().dbParams__mapsize);
        env.open(dbDir, false, dbFlags);
    [% ELSE %]
        env.open(dbDir, true, dbFlags);
    [% END %]

    {
        auto txn = env.txn_rw();

        [% IF golpe.onAppStartup %]
        onAppStartup(txn, command);
        [% END %]

        txn.commit();
    }
    [% END %]

    [% FOREACH cmd IN cmds %]
        if (command == "[% cmd %]") {
            cmd_[% cmd %](args["<args>"].asStringList());
            return;
        }
    [% END %]

    [% FOREACH app IN apps %][% FOREACH cmd IN app.cmds %]
        if (command == "[% cmd %]") {
            cmd_[% cmd %](args["<args>"].asStringList());
            return;
        }
    [% END %][% END %]

    throw hoytech::error("unknown command: ", command);
}


int main(int argc, char **argv) {
    try {
        run(argc, argv);
    } catch (std::exception &e) {
        std::cerr << "[% golpe.appName %] error: " << e.what() << std::endl;
        ::exit(1);
    }

    return 0;
}
