#pragma once

#include <atomic>

#include <tao/config/value.hpp>


struct ConfigValues {
  private:
    uint64_t _configVersion = 1;

  public:
    ConfigValues(uint64_t ver) : _configVersion(ver) {}

    uint64_t version() const { return _configVersion; }

[% FOREACH c IN config %]
    [% c.typeCpp %] [% c.nameCpp %] = [% c.defaultCpp %];
[% END %]

};

tao::config::value loadRawTaoConfig(const std::string &configFile);
void loadConfig(const std::string &configFile);

extern std::atomic<ConfigValues*> currentCfg;

inline const ConfigValues &cfg() {
    return *currentCfg.load();
}
